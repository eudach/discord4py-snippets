{
    "Command out of cog":
    {
        "prefix": "%cmd",
        "body":[
            "@${1|bot, client, bot_class_instance_name|}.command(name=\"${2:commandname}\", aliases=[\"$3\"], description=\"$4\", help=\"${5:help}\", usage=\"\")",
            "async def _${2:commandname}(ctx:commands.Context):",
            "    await ctx.send(\"$0\")"
        ],
        "description": "Code snippet for a command outside of a cog"
    },

    "Basic command out of cog":
    {
        "prefix": "%cmdb",
        "body":[
            "@${1|bot, client|}.command(name=\"${2:commandname}\", aliases=[\"$3\"])",
            "async def _${2:commandname}(ctx:commands.Context):",
            "    await ctx.send(\"Hello World\")$0"
        ],
        "description": "Basic code snippet for a command outside of a cog"

    },

    "Command inside a cog":
    {
        "prefix": "%cgcmd",
        "body":[
            "@commands.command(name=\"${1:commandname}\", aliases=[\"$2\"], description=\"${3:description_command}\", help=\"${4:help}\", usage=\"\")",
            "async def _${1:commandname}(self, ctx:commands.Context):",
            "    await ctx.send(\"$0\")"

        ],
        "description": "Code snippet for a command inside a cog"
    },

    "Basic command inside a cog":{
        "prefix": "%cgcmdb",
        "body":[
            "@commands.command(name=\"${1:commandname}\", aliases=[\"$2\"])",
            "async def _${1:commandname}(ctx:commands.Context):",
            "    await ctx.send(\"Hello World\")$0"
        ],
        "description": "Basic code snippet for a command inside a cog"
    },

    "Help Command ":{
        "prefix": "%help",
        "body":[
            "class BotHelp(commands.HelpCommand):",
            "",
            "    async def send_bot_help(self, mapping):",
            "        await self.context.send(\":D\")",
            "",
            "    async def send_command_help(self, command:commands.Command):",
            "        description = command.description if command.description is not None else \"Not proportioned\"",
            "        help_ = command.help if command.help is not None else \"Not proportioned\"",
            "        usage = command.usage if command.usage is not None else \"Not proportioned\"",
            "        embed = discord.Embed(title=f\"{command.name} Help\", description=description, color=discord.Color.dark_gray()",
            "        embed.add_field(name=\"Help\", value=help_, inline=False)",
            "        embed.add_field(name=\"Usage\", value=usage, inline=False)",
            "        await self.context.send(embed=embed)",
            "",
            "    async def send_group_help(self, group:commands.Group):",
            "        description = group.description if group.description is not None else \"Not proportioned\"",
            "        embed = discord.Embed(title=f\"{group.name} Help\", description=description, color=discord.Color.dark_gray()",
            "        count = 1",
            "        for command in group.commands:",
            "            description = command.description if command.description is not None else \"Not proportioned\"",
            "            embed.add_field(name=f\"`{count}` - {command.name}\", value=description, inline=False)",
            "            count+=1",
            "        await self.context.send(embed=embed)",
            "",
            "    async def send_cog_help(self, cog:commands.Cog):",
            "        pass",
            "",
            "    async def send_error_message(self, error:commands.Error):",
            "        pass$0"

        ],
        "description": "Code snippet of the help command for the bot in main file"

    }



}